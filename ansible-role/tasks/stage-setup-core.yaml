- become: true
  block:
    - name: Install python3,python3-pip
      ansible.builtin.apt:
        name: python3,python3-pip
        cache_valid_time: 3600

    - name: Create PiKi directory ({{ piki_dir }})
      ansible.builtin.file:
        path: "{{ piki_dir }}"
        state: directory
        owner: pi
        group: pi

- name: Copy PiKi files
  ansible.posix.synchronize:
    src: "{{ item }}"
    dest: "{{ piki_dir }}/"
  loop:
    # copy bin files
    - "{{ [role_path, 'files', 'bin'] | path_join }}"
    # copy piki files
    # XXX: this is kind of a hack to install piki from the parent directory
    #      IF the role is installed on ANSIBLE_HOME (e.g. galaxy install)
    #      the root files are at {{ role_path + '/' + role_name }}, a
    #      sub-directory with the same name as the role name, this is an
    #      artifact of how roles that are not on the root directory are
    #      installed (may not be intended, but works for now), see:
    #      https://github.com/ansible/ansible/blob/devel/lib/ansible/galaxy/role.py
    #      IF the role is included locally (e.g. relative include_role), the
    #      root files are in the expected location {{ role_path + '/..' }}
    #      USING SYMLINKS DOES NOT WORK, the code that installs the role
    #      forbids symlinks that link outside the role (maybe this could be
    #      improved, i.e. only block symlinks outside the archive, but there
    #      is the issue of where to put the root files)
    #      I ADMIT that using a role on a sub-directory is not very standard,
    #      but I think it makes for a nicer directory structure, instead of
    #      putting all the application code in files/
    #      ULTIMATELY maybe the role could just be a different repo, but a
    #      monorepo for this project is nicer :) BYE FOR NOW
    - "{{ role_path.startswith([lookup('config', 'ANSIBLE_HOME'), ''] | path_join) | ternary([role_path, role_name, 'piki'] | path_join, [role_path, '..', 'piki', ''] | path_join | normpath) }}"

- name: Create PiKi directories
  ansible.builtin.file:
    path: "{{ piki_dir }}/{{ item }}"
    state: directory
  loop: [plugins]

- name: Setup PiKi virtualenv and dependencies
  ansible.builtin.pip:
    virtualenv: "{{ piki_dir }}/.venv"
    virtualenv_command: python3 -m venv
    name: "{{ piki_dir }}/piki"
    editable: true

- name: Create PiKi virtualenv bin symlinks
  ansible.builtin.file:
    src: "../.venv/bin/{{ item }}"
    path: "{{ piki_dir }}/bin/{{ item }}"
    state: link
  loop: [piki-core, piki-utils]

- name: Add PiKi bin to user path
  ansible.builtin.lineinfile:
    path: /home/pi/.profile
    line: PATH="{{ piki_dir }}/bin:$PATH"
  when: piki_add_bin_to_user_path

- become: true
  block:
    - name: Disable getty on /dev/tty1
      ansible.builtin.systemd_service:
        name: getty@tty1
        enabled: false
        state: stopped
      when: piki_disable_getty_tty1

    - name: Create piki-setup.service
      ansible.builtin.template:
        src: templates/piki-setup.service.j2
        dest: /etc/systemd/system/piki-setup.service

    - name: Create piki-tty.service
      ansible.builtin.template:
        src: templates/piki-tty.service.j2
        dest: /etc/systemd/system/piki-tty.service
      when: piki_tty_enabled
